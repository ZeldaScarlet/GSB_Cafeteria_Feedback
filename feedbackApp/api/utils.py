import google.generativeai as genai
import pandas as pd
import logging
from django.conf import settings

# ğŸ“Œ Logger AyarlarÄ±
logger = logging.getLogger(__name__)

# ğŸ“Œ Gemini API AnahtarÄ±nÄ± Ayarla
#genai.configure(api_key=settings.GEMINI_API_KEY)

# ğŸ“Œ Duygu Analizi Fonksiyonu (Gemini API Kullanarak)
def analyze_sentiment(comment):
    """
    KullanÄ±cÄ±nÄ±n geri bildirimini alÄ±p Gemini API ile duygu analizi yapar.
    """
    try:
        model = genai.GenerativeModel("gemini-pro")
        response = model.generate_content(f"Bu yorumu analiz et ve sadece 'Olumlu', 'NÃ¶tr' veya 'Olumsuz' olarak cevap ver: {comment}")
        sentiment = response.text.strip()

        # EÄŸer API yanÄ±tÄ± beklenmeyen bir deÄŸer dÃ¶ndÃ¼rÃ¼rse, 'NÃ¶tr' olarak varsayalÄ±m
        if sentiment not in ["Olumlu", "NÃ¶tr", "Olumsuz"]:
            sentiment = "NÃ¶tr"
        
        return sentiment
    except Exception as e:
        logger.error(f"Gemini API Ã§aÄŸrÄ±sÄ±nda hata oluÅŸtu: {str(e)}")
        return "NÃ¶tr"

# ğŸ“Œ Excel'den Yemek Verilerini Alma
def process_meal_excel(file_path):
    """
    YÃ¶neticinin yÃ¼klediÄŸi Excel dosyasÄ±nÄ± okuyup yemek verilerini dÃ¶ndÃ¼rÃ¼r.
    """
    try:
        df = pd.read_excel(file_path)

        # ğŸ“Œ Gerekli sÃ¼tunlar var mÄ± kontrol et
        required_columns = ['name', 'category', 'city', 'date']
        if not all(col in df.columns for col in required_columns):
            raise ValueError("Excel dosyasÄ±nda eksik sÃ¼tunlar var!")

        meals = []
        for _, row in df.iterrows():
            meals.append({
                "name": row['name'],
                "category": row['category'],
                "city": row['city'],
                "date": row['date'],
            })

        return meals
    except Exception as e:
        logger.error(f"Excel iÅŸleme hatasÄ±: {str(e)}")
        return None
